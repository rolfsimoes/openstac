% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/api-oafeat.R, R/api-stac.R, R/api.R
\name{api_landing_page.oafeat}
\alias{api_landing_page.oafeat}
\alias{api_conformance.oafeat}
\alias{api_collections.oafeat}
\alias{api_collection.oafeat}
\alias{api_items.oafeat}
\alias{api_item.oafeat}
\alias{api_landing_page.stac}
\alias{api_conformance.stac}
\alias{api_collections.stac}
\alias{api_collection.stac}
\alias{api_items.stac}
\alias{api_item.stac}
\alias{api_search.stac}
\alias{api_handling}
\alias{create_api}
\alias{create_oafeat}
\alias{create_stac}
\alias{setup_plumber}
\alias{api_landing_page}
\alias{api_conformance}
\alias{api_collections}
\alias{api_collection}
\alias{api_items}
\alias{api_item}
\alias{api_search}
\title{Handle API requests}
\usage{
\method{api_landing_page}{oafeat}(api, ...)

\method{api_conformance}{oafeat}(api, ...)

\method{api_collections}{oafeat}(api, ...)

\method{api_collection}{oafeat}(api, collection_id, ...)

\method{api_items}{oafeat}(api, collection_id, limit, bbox, datetime, page, ...)

\method{api_item}{oafeat}(api, collection_id, item_id, ...)

\method{api_landing_page}{stac}(api, ...)

\method{api_conformance}{stac}(api, ...)

\method{api_collections}{stac}(api, ...)

\method{api_collection}{stac}(api, collection_id, ...)

\method{api_items}{stac}(api, collection_id, limit, bbox, datetime, page, ...)

\method{api_item}{stac}(api, collection_id, item_id, ...)

\method{api_search}{stac}(api, limit, bbox, datetime, intersects, ids, collections, page, ...)

create_api(api_class, title, description, conforms_to, ...)

create_oafeat(title, description, conforms_to = NULL, ...)

create_stac(id, title, description, conforms_to = NULL, ...)

setup_plumber(
  api,
  pr,
  ...,
  handle_errors = TRUE,
  api_base_url = NULL,
  spec_endpoint = "/api",
  docs_endpoint = "/docs"
)

api_landing_page(api, ...)

api_conformance(api, ...)

api_collections(api, ...)

api_collection(api, collection_id, ...)

api_items(api, collection_id, limit, bbox, datetime, page, ...)

api_item(api, collection_id, item_id, ...)

api_search(api, limit, bbox, datetime, intersects, ids, collections, page, ...)
}
\arguments{
\item{api}{An object representing the API. This object is typically
created using either the \code{create_stac} or \code{create_ogcapi}}

\item{...}{Additional arguments to be passed to the method-specific
functions.}

\item{collection_id}{The identifier of the collection. This parameter
specifies which collection the request is targeting.}

\item{limit}{The maximum number of items to return. If not specified,
the default value is used.}

\item{bbox}{The bounding box for spatial filtering, specified as a
comma-separated string of four coordinates
(\code{long_min},\code{lat_min},\code{long_max},\code{lat_max}).}

\item{datetime}{The temporal filter for items. It must be specified
as a STAC datetime interval or timestamp string
(e.g. \code{2020-03-29/2021-12-31}).}

\item{page}{The page number of the results when paginating.}

\item{item_id}{The identifier of the item within the specified collection.
This parameter specifies which item the request is targeting.}

\item{intersects}{The spatial filter for items, specified as a GeoJSON
geometry object representing the area of interest. The data comes
as string representing a GeoJSON geometry.}

\item{ids}{A comma-separated string of item identifiers to filter
the search results.}

\item{collections}{A comma-separated string of collection identifiers
to filter the search results.}

\item{api_class}{A character string specifying the custom S3 class
of the API. It allows advanced users setup new classes to handle
response documents. Currently, \code{openstac} supports \code{oafeat} and
\code{stac} S3 classes. To implement a new set of response document
handlers, users must implement for their new class all generic
functions declared in \code{R/doc.R}. For more details, see the
\code{github} page of the project.}

\item{title}{A character string specifying the title of the API.}

\item{description}{A character string describing the API.}

\item{conforms_to}{A character vector specifying the conformance
standards adhered to by the API. This parameter can be NULL or
contain additional conformance standards to add to the defaults.}

\item{id}{A character string specifying the id of the API.}

\item{pr}{The Plumber router object to be associated with the API server.
For annotated API definition, users can capture the current Plumber
object by annotating \verb{@plumber} keyword in comment block. See
references below for more details.}

\item{handle_errors}{A logical value indicating whether to handle
errors using the \code{openstac} default error handler. Default is \code{TRUE}.}

\item{spec_endpoint}{The endpoint where the API specification
(OpenAPI) will be available. An \code{NULL} value disable this feature.}

\item{docs_endpoint}{The endpoint where the API documentation
(swagger) will be available. An \code{NULL} value disable this feature.}

\item{req}{The request object from the \code{plumber} package, containing
information about the HTTP request made to the API endpoint.}

\item{res}{The response object from the \code{plumber} package, used to
construct and send the HTTP response back to the client making
the request.}
}
\value{
For API creation functions, returns a api object. For API
handling functions, returns the document to return as response.
}
\description{
These are functions responsible for handling requests of the
API endpoint. It interfaces HTTP requests from \code{plumber} and uses the
\code{api} and the \code{req} objects to prepare a response to the request by
dispatching to specific API implementations. HTTP input parameters are
parsed internally.
}
\details{
\itemize{

\item \code{create_api}: Creates an API object. It allows users setup
custom API classes to create response documents.

\item \code{create_oafeat}: Creates an API object for OGC API Features.

\item \code{create_stac}: Creates an API object for STAC.

\item \code{setup_plumber}: Register the Plumber router in the API server.
It also can enable the Plumber documentation and set the handler
of errors in the API.

\item \code{api_spec}: Generates the OpenAPI specification for the API server.

\item \code{api_landing_page}: Handles the STAC \code{/} endpoint.

\item \code{api_conformance}: Handles the STAC \verb{/conformance} endpoint.

\item \code{api_collections}: Handles the STAC \verb{/collections} endpoint.

\item \code{api_collection}: Handles the STAC
\verb{/collection/\{collection_id\}} endpoint.

\item \code{api_items}: Handles the STAC
\verb{/collection/\{collection_id\}/items} endpoint.

\item \code{api_item}: Handles the STAC
\verb{/collection/\{collection_id\}/item/\{item_id\}} endpoint.

\item \code{api_search}: Handles the STAC \verb{/search} endpoint.

}
}
\references{
For more information about the STAC specification,
see: \url{https://stacspec.org/}

For more information about the OGC API specification,
see: \url{http://www.opengis.net/doc/IS/ogcapi-features-1/1.0}

For more information about annotated Plumber API definition, see:
\url{https://www.rplumber.io/articles/annotations.html}
}
